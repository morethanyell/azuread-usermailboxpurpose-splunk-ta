{"basic_builder": {"appname": "TA-azure-user-mailbox-purpose", "friendly_name": "Azure User Mailbox Purpose", "version": "1.0.0", "author": "morethanyell", "description": "Collect users' Mailbox Purpose", "theme": "#0358a6", "large_icon": "", "small_icon": "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", "visible": true, "tab_version": "4.4.1", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "azure:aad:user:mailboxpurpose", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "mailbox_purpose", "title": "Mailbox Purpose", "description": "Collect users' Mailbox Purpose", "type": "customized", "parameters": [{"required": true, "name": "app_client_id", "label": "App/Client ID", "default_value": "", "placeholder": "", "help_string": "Must have MailboxSettings.Read permission", "type": "text", "format_type": "text", "value": ""}, {"required": true, "name": "client_secret", "label": "Client Secret", "placeholder": "", "default_value": "", "help_string": "", "type": "password", "format_type": "password", "value": ""}, {"required": true, "name": "tenant_id", "label": "Tenant ID", "default_value": "", "placeholder": "", "help_string": "", "type": "text", "format_type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "app_client_id", "title": "App/Client ID", "description": "Must have MailboxSettings.Read permission", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "client_secret", "title": "Client Secret", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "\r\n# encoding = utf-8\r\n\r\nimport time\r\nimport json\r\nimport requests\r\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\r\n\r\ndef get_access_token(helper, client_id, client_secret, token_url):\r\n    \r\n    data = {\r\n        \"grant_type\": \"client_credentials\",\r\n        \"client_id\": client_id,\r\n        \"client_secret\": client_secret,\r\n        \"scope\": \"https://graph.microsoft.com/.default\"\r\n    }\r\n    \r\n    helper.log_info(\"Retrieving access token from Graph.\")\r\n    \r\n    try:\r\n        \r\n        response = requests.post(token_url, data=data)\r\n        response.raise_for_status()\r\n        token_info = response.json()\r\n        \r\n        helper.log_info(f\"Access token for client id {client_id} has been granted...\")\r\n        \r\n        return token_info['access_token']\r\n    except requests.RequestException as e:\r\n        helper.log_error(f\"Error obtaining token: {e}\")\r\n        return None\r\n\r\ndef get_all_users(helper, token, url):\r\n    \r\n    headers = {\"Authorization\": f\"Bearer {token}\"}\r\n\r\n    response = requests.get(url, headers=headers)\r\n    \r\n    if response.status_code > 200:\r\n        return None\r\n    \r\n    response.raise_for_status()\r\n    \r\n    data = response.json()\r\n\r\n    next_url = data.get(\"@odata.nextLink\")\r\n\r\n    return data.get(\"value\", []), next_url\r\n\r\ndef get_user_purpose(helper, user_id, token):\r\n    \r\n    url = f\"https://graph.microsoft.com/v1.0/users/{user_id}/mailboxSettings/userPurpose\"\r\n    headers = {\"Authorization\": f\"Bearer {token}\"}\r\n\r\n    while True:\r\n        response = requests.get(url, headers=headers)\r\n\r\n        if response.status_code == 429:  # Rate limit hit\r\n            retry_after = int(response.headers.get(\"Retry-After\", 10))\r\n            helper.log_error(f\"Rate limited for {user_id}. Retrying in {retry_after} sec...\")\r\n            time.sleep(retry_after)\r\n            continue\r\n\r\n        if response.status_code == 200:\r\n            user_purpose = response.json().get(\"value\")\r\n            if user_purpose in ('linked', 'shared', 'room', 'equipment', 'others'):\r\n                return user_purpose \r\n            else:\r\n                return None\r\n\r\n        return None\r\n\r\ndef validate_input(helper, definition):\r\n    pass\r\n\r\ndef collect_events(helper, ew):\r\n    \r\n    CLIENT_ID = helper.get_arg('app_client_id')\r\n    CLIENT_SECRET = helper.get_arg('client_secret')\r\n    TENANT_ID = helper.get_arg('tenant_id')\r\n    \r\n    TOKEN_URL = f\"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token\"\r\n    GRAPH_API_URL = \"https://graph.microsoft.com/v1.0/users?$select=id,userPrincipalName,mail&$filter=userType eq 'Member'&\"\r\n    \r\n    log_level = helper.get_log_level()\r\n    \r\n    helper.set_log_level(log_level)\r\n    \r\n    helper.log_info(f\"Start of collection.\")\r\n    helper.log_info(f\"Logging level is set to: {log_level}\")\r\n    helper.log_info(f\"Collecting Azure Entra ID user objects' mailboxSettings-->userPurpose from Azure tenant {TENANT_ID}, using app/client {CLIENT_ID}\")\r\n    \r\n    token = get_access_token(helper, CLIENT_ID, CLIENT_SECRET, TOKEN_URL)\r\n    meta_source = f\"ms_aad_user:tenant_id:{TENANT_ID}\"\r\n    \r\n    ctr = 0\r\n    \r\n    helper.log_info(\"Concurrent Futures, multi-thread API calls start here.\")\r\n    \r\n    next_url = GRAPH_API_URL\r\n    \r\n    while next_url:\r\n        \r\n        helper.log_info(f\"Getting all users. Will start indexing data for every pagination.\")\r\n        \r\n        users, next_url = get_all_users(helper, token, GRAPH_API_URL)\r\n    \r\n        with ThreadPoolExecutor(max_workers=5) as executor:\r\n            future_to_user = {executor.submit(get_user_purpose, helper, user[\"id\"], token): user for user in users}\r\n\r\n            for future in as_completed(future_to_user):\r\n                user = future_to_user[future]\r\n                try:\r\n                    user_purpose = future.result()\r\n                    if user_purpose:\r\n                        \r\n                        user[\"mailboxSettingsUserPurpose\"] = user_purpose\r\n                        \r\n                        data_event = json.dumps(user, separators=(',', ':'))\r\n                        event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data_event)\r\n                        \r\n                        ctr = ctr + 1\r\n                        \r\n                        ew.write_event(event)\r\n                        \r\n                except Exception as e:\r\n                    helper.log_error(f\"Error processing user {user['id']}: {e}\")\r\n    \r\n    helper.log_info(f\"ThreadPoolExecutor has completed for all possible API calls. Total events ingested: {ctr}.\")\r\n    helper.log_info(\"End of collection.\")\r\n    ", "customized_options": [{"name": "app_client_id", "value": "36e85666-1f95-41f2-8fba-be70b5b2b930"}, {"name": "tenant_id", "value": "e2ba81b8-03fe-407c-96a1-f4bc0f512e7d"}], "uuid": "3b496c68bcdd4f2e926aea7b71b865d8"}]}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "sourcetype_builder": {"azure:aad:user:mailboxpurpose": {"metadata": {"event_count": 0, "data_input_name": "mailbox_purpose", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1740171034_75", "progress": 1.0}}